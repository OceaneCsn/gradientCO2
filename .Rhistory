nodes <- data$nodes
View(nodes)
network_data
source('../grn_inference/rank_nodes.R')
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
rank_nodes <- function(graph, regulators, gene_info = NULL){
data <- visNetwork::toVisNetworkData(graph)
degree <- igraph::degree(graph)
degree_out <- igraph::degree(graph, mode = "out")
degree_in <- igraph::degree(graph, mode = "in")
# degree computaton
data$nodes$degree <- degree[match(data$nodes$id, names(degree))]
data$nodes$degree_out <- degree_out[match(data$nodes$id, names(degree_out))]
data$nodes$degree_in <- degree_in[match(data$nodes$id, names(degree_in))]
# modules computation
data$nodes$group <- ifelse(data$nodes$id %in% regulators, "Regulator",
ifelse(grepl("mean_", data$nodes$id),
"Grouped Regulators", "Target Gene"))
data$nodes$gene_type <- data$nodes$group
# adding additional infos
if(!is.null(gene_info)){
data$nodes[,colnames(gene_info)] <-
gene_info[match(data$nodes$id, rownames(gene_info)), ]
}
return(data$nodes)
}
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
nodes_O.5 <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5,
pwm_occurrence = pwm_occurrence, nCores = 50)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
nodes_1 <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
View(nodes_1)
View(nodes_1)
View(nodes_O.5)
importances <- bRF_inference(counts, genes, tfs, alpha = 0.8 prior_strength = 5,
importances <- bRF_inference(counts, genes, tfs, alpha = 0.8, prior_strength = 5,
pwm_occurrence = pwm_occurrence, nCores = 50)
importances <- bRF_inference(counts, genes, tfs, alpha = 0.8, prior_strength = 5,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
mean(grn_bRF$pwm)
nodes_1 <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
`
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
nodes_0.8 <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
nodes_0.8 <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
View(nodes_0.8)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5,
pwm_occurrence = pwm_occurrence, nCores = 50)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
mean(grn_bRF$pwm)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
head(nodes[order(nodes$degree_out, decreasing = T),])
head(nodes[order(nodes$degree_out, decreasing = T),], n=20)
head(nodes[order(nodes$degree_out, decreasing = T),], n=30)
head(nodes[order(nodes$degree_in, decreasing = T),], n=30)
importances <- bRF_inference(counts, genes, tfs, alpha = 0, prior_strength = 5,
pwm_occurrence = pwm_occurrence, nCores = 50)
importances <- bRF_inference(counts, genes, tfs, alpha = 0, prior_strength = 5,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
mean(grn_bRF$pwm)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
head(nodes[order(nodes$degree_out, decreasing = T),], n=30)
head(nodes[order(nodes$degree_in, decreasing = T),], n=30)
importances
heatmap(importances)
heatmap(importances)
dim(importances)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5,
pwm_occurrence = pwm_occurrence, nCores = 50)
heatmap(importances)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
head(nodes[order(nodes$degree_out, decreasing = T),], n=30)
head(nodes[order(nodes$degree_in, decreasing = T),], n=30)
head(nodes[order(nodes$degree, decreasing = T),], n=30)
heatmap(importances)
hist(importances)
hist(importances)
hist(importances, breaks = 100)
colMeans(importance())
colMeans(importances)
rowMeans(counts)
length(colMeans(importances))
length(rowMeans(counts))
length(colMeans(importances))
length(rowMeans(counts))
plot(length(colMeans(importances)),length(rowMeans(counts)))
plot(colMeans(importances),rowMeans(counts))
plot(rowMeans(counts), colMeans(importances))
plot(log(rowMeans(counts)), log(colMeans(importances)))
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50)
heatmap(importances)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
head(nodes[order(nodes$degree_out, decreasing = T),], n=30)
head(nodes[order(nodes$degree_in, decreasing = T),], n=30)
head(nodes[order(nodes$degree, decreasing = T),], n=30)
plot(log(rowMeans(counts)), log(colMeans(importances)))
connecTF_validation <- evaluate_networks(list("scaled" = grn_bRF),
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = F,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_not_scales <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
connecTF_validation <- evaluate_networks(list("scaled" = grn_bRF, "not_scaled" = grn_bRF_not_scales),
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
summary(importances)
summary(c(importances))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(patchwork)
# custom scripts for GRN inference
source('../inference_functions/bRF.R')
source('../inference_functions/LASSO-D3S.R')
source('../inference_functions/evaluateNetwork.R')
source('../inference_functions/MSE.R')
source('../grn_inference/rank_nodes.R')
load('../rdata/CO2_degs_expression.rdata')
genes <- CO2_responsive_genes$genes
tfs <- CO2_responsive_genes$tfs
counts <- CO2_responsive_genes$counts
load("../rdata/pwm_occurrences_CO2_response.rdata")
dim(pwm_occurrence)
networks <- list()
for(alpha in seq(0, 1, by = 0.2)){
importances <- bRF_inference(counts, genes, tfs, alpha = alpha,
pwm_occurrence = pwm_occurrence, nCores = 40)
for(density in c(0.001,0.005,0.01)){
grn_bRF <- bRF_network(importances, density =density, pwm_occurrence, genes, tfs)
networks[[paste0(alpha, '_', density)]] <- grn_bRF
}
}
importances <- bRF_inference(counts/genefilter::rowSds(counts), genes, tfs, alpha = 1, prior_strength = 5, scale = F,
pwm_occurrence = pwm_occurrence, nCores = 50)
heatmap(importances)
grn_bRF_not_scales <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
grn_bRF_not_scales <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
library(DIANE)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
plot(log(rowMeans(counts)), log(colMeans(importances)))
head(nodes[order(nodes$degree_out, decreasing = T),], n=30)
head(nodes[order(nodes$degree_out, decreasing = T),], n=30)
head(nodes[order(nodes$degree_in, decreasing = T),], n=30)
head(nodes[order(nodes$degree, decreasing = T),], n=30)
View(nodes)
grn_bRF_not_scales <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
plot(log(rowMeans(counts)), log(colMeans(importances)))
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_not_scales <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
head(nodes[order(nodes$degree_out, decreasing = T),], n=30)
head(nodes[order(nodes$degree_in, decreasing = T),], n=30)
head(nodes[order(nodes$degree, decreasing = T),], n=30)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_not_scales <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
head(nodes[order(nodes$degree_out, decreasing = T),], n=30)
head(nodes[order(nodes$degree_in, decreasing = T),], n=30)
head(nodes[order(nodes$degree, decreasing = T),], n=30)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_scaled <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
nodes_scaled <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
plot(log(rowMeans(counts)), log(colMeans(importances)))
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = F,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_not_scaled <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF$pwm)
nodes_not_scaled <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
plot(log(rowMeans(counts)), log(colMeans(importances)))
mean(grn_bRF_scaled$pwm)
mean(grn_bRF_not_scaled$pwm)
View(nodes_scaled)
View(nodes_not_scaled)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50,
importance = "IncNodePurity")
grn_bRF_mdi <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
connecTF_validation <- evaluate_networks(list("scaled" = grn_bRF_scaled, "not_scaled" = grn_bRF_not_scaled, "mdi" = grn_bRF_mdi),
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
connecTF_validation
connecTF_target <- evaluate_networks(list("scaled" = grn_bRF_scaled, "not_scaled" = grn_bRF_not_scaled, "mdi" = grn_bRF_mdi),
input_genes = genes, input_tfs = tfs, nCores = 40, validation = c("TARGET")); connecTF_taregt
connecTF_target <- evaluate_networks(list("scaled" = grn_bRF_scaled, "not_scaled" = grn_bRF_not_scaled, "mdi" = grn_bRF_mdi),
input_genes = genes, input_tfs = tfs, nCores = 40, validation = c("TARGET")); connecTF_target
connecTF_target
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_scaled <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF_scaled$pwm)
nodes_scaled <- rank_nodes(graph_from_data_frame(grn_bRF_scaled, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
plot(log(rowMeans(counts)), log(colMeans(importances)))
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = F,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_not_scaled <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF_not_scaled$pwm)
nodes_not_scaled <- rank_nodes(graph_from_data_frame(grn_bRF_not_scaled, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50,
importance = "IncNodePurity")
grn_bRF_mdi <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF_mdi$pwm)
nodes_mdi <- rank_nodes(graph_from_data_frame(grn_bRF_mdi, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
connecTF_validation <- evaluate_networks(list("scaled" = grn_bRF_scaled, "not_scaled" = grn_bRF_not_scaled, "mdi" = grn_bRF_mdi),
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
connecTF_target <- evaluate_networks(list("scaled" = grn_bRF_scaled, "not_scaled" = grn_bRF_not_scaled, "mdi" = grn_bRF_mdi),
input_genes = genes, input_tfs = tfs, nCores = 40, validation = c("TARGET")); connecTF_target
View(nodes)
View(nodes_mdi)
importances <- bRF_inference(counts/genefilter::rowsds(counts), genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50)
importances <- bRF_inference(counts/genefilter::rowSds(counts), genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_scaled_sd <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF_scaled_sd$pwm)
nodes_scaled_sd <- rank_nodes(graph_from_data_frame(grn_bRF_scaled_sd, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
connecTF_validation <- evaluate_networks(list("scaled" = grn_bRF_scaled,"scaled-sd" = grn_bRF_scaled_sd, "not_scaled" = grn_bRF_not_scaled, "mdi" = grn_bRF_mdi),
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
importances <- bRF_inference(counts/rowMeans(counts), genes, tfs, alpha = 1, prior_strength = 5, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_scaled_mean <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
mean(grn_bRF_scaled_mean$pwm)
nodes_scaled_mean <- rank_nodes(graph_from_data_frame(grn_bRF_scaled_mean, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
connecTF_validation <- evaluate_networks(list("scaled" = grn_bRF_scaled,"scaled-sd" = grn_bRF_scaled_sd, "scaled-mean" = grn_bRF_scaled_mean, "not_scaled" = grn_bRF_not_scaled, "mdi" = grn_bRF_mdi),
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
networks <- list()
for(alpha in seq(0, 1, by = 0.2)){
importances <- bRF_inference(counts, genes, tfs, alpha = alpha, scale = T,
pwm_occurrence = pwm_occurrence, nCores = 40)
for(density in c(0.001,0.005,0.01)){
grn_bRF <- bRF_network(importances, density =density, pwm_occurrence, genes, tfs)
networks[[paste0(alpha, '_', density)]] <- grn_bRF
}
}
connecTF_validation <- evaluate_networks(networks,
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
edges_num <- lapply(networks, function(df) df[sapply(df, is.numeric)])
d <- data.frame(name = names(unlist(lapply(edges_num, FUN = nrow))),
pwm = unlist(lapply(edges_num, FUN = colMeans)))
d%>%
separate(col = name, into = c("alpha", "density"), sep = '_') %>%
mutate(density = str_remove(density,"\\.pwm")) %>%
ggplot(aes(x=alpha, y=pwm, col = density)) +geom_smooth() + geom_point()
connecTF_validation %>%
separate(col = network_name, into = c("alpha", "density"), sep = '_') %>%
ggplot(aes(x=alpha, y=precision, col = density)) +geom_smooth() + geom_point()
connecTF_validation %>%
separate(col = network_name, into = c("alpha", "density"), sep = '_') %>%
ggplot(aes(x=alpha, y=recall, col = density)) +geom_smooth() + geom_point()
networks <- list()
for(alpha in seq(0, 1, by = 0.2)){
importances <- bRF_inference(counts, genes, tfs, alpha = alpha, scale = T,prior_strength = 1,
pwm_occurrence = pwm_occurrence, nCores = 40)
for(density in c(0.001,0.005,0.01)){
grn_bRF <- bRF_network(importances, density =density, pwm_occurrence, genes, tfs)
networks[[paste0(alpha, '_', density)]] <- grn_bRF
}
}
connecTF_validation <- evaluate_networks(networks,
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
edges_num <- lapply(networks, function(df) df[sapply(df, is.numeric)])
d <- data.frame(name = names(unlist(lapply(edges_num, FUN = nrow))),
pwm = unlist(lapply(edges_num, FUN = colMeans)))
d%>%
separate(col = name, into = c("alpha", "density"), sep = '_') %>%
mutate(density = str_remove(density,"\\.pwm")) %>%
ggplot(aes(x=alpha, y=pwm, col = density)) +geom_smooth() + geom_point()
connecTF_validation <- evaluate_networks(networks,
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
connecTF_validation %>%
separate(col = network_name, into = c("alpha", "density"), sep = '_') %>%
ggplot(aes(x=alpha, y=precision, col = density)) +geom_smooth() + geom_point()
connecTF_validation %>%
separate(col = network_name, into = c("alpha", "density"), sep = '_') %>%
ggplot(aes(x=alpha, y=recall, col = density)) +geom_smooth() + geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(patchwork)
library(DIANE)
# custom scripts for GRN inference
source('../inference_functions/bRF.R')
source('../inference_functions/LASSO-D3S.R')
source('../inference_functions/evaluateNetwork.R')
source('../inference_functions/MSE.R')
source('../grn_inference/rank_nodes.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(patchwork)
library(DIANE)
# custom scripts for GRN inference
source('../inference_functions/bRF.R')
source('../inference_functions/LASSO-D3S.R')
source('../inference_functions/evaluateNetwork.R')
source('../inference_functions/MSE.R')
source('../grn_inference/rank_nodes.R')
load('../rdata/CO2_degs_expression.rdata')
genes <- CO2_responsive_genes$genes
tfs <- CO2_responsive_genes$tfs
counts <- CO2_responsive_genes$counts
load("../rdata/pwm_occurrences_CO2_response.rdata")
dim(pwm_occurrence)
importances <- bRF_inference(counts/rowMeans(counts), genes, tfs, alpha = 1, prior_strength = 1, scale = F,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF_scaled_mean <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
load('../rdata/CO2_degs_expression.rdata')
genes <- CO2_responsive_genes$genes
tfs <- CO2_responsive_genes$tfs
counts <- CO2_responsive_genes$counts
load("../rdata/pwm_occurrences_CO2_response.rdata")
dim(pwm_occurrence)
importances <- bRF_inference(counts/rowMeans(counts), genes, tfs, alpha = 1, prior_strength = 1, scale = F,
pwm_occurrence = pwm_occurrence, nCores = 50)
target = genes[1]
# attributing 0.5 for prior value for PWM with unknown PWM
pwm_imputed <- pwm_occurrence
pwm_imputed[is.na(pwm_imputed)] <- 0.5
x <- t(counts[tfs,])
target_tfs <- setdiff(tfs, target)
x_target <- x[, target_tfs]
p = length(target_tfs)
y <- as.numeric(t(counts[target, ]))
alpha = 0.8
prior_strength = 5
weights <- 10^(prior_strength* pwm_imputed[target, target_tfs]*alpha)
hist(weights)
weights <- weights/sum(weights)
rf_weighted <-irafnet_onetarget(x_target,y=y,importance=TRUE,
mtry=round(sqrt(p)),
ntree=nTrees,
sw=weights)
nTrees=500
rf_weighted <-irafnet_onetarget(x_target,y=y,importance=TRUE,
mtry=round(sqrt(p)),
ntree=nTrees,
sw=weights)
im <- rf_weighted$importance[,importance]
importance="%IncMSE"
im <- rf_weighted$importance[,importance]
hist(im)
plot(im)
rf_weighted$mse
hist(rf_weighted$mse)
mean(rf_weighted$mse)
# custom scripts for GRN inference
source('../inference_functions/bRF.R')
importances <- bRF_inference(counts/rowMeans(counts), genes, tfs, alpha = 1, prior_strength = 1, scale = F,
pwm_occurrence = pwm_occurrence, nCores = 50)
importances <- bRF_inference(counts, genes, tfs, alpha = 1, prior_strength = 1, scale = F,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
heatmap(importances)
mean(grn_bRF$pwm)
plot(log(rowMeans(counts)), log(colMeans(importances)))
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
View(nodes)
networks <- list()
for(alpha in seq(0, 1, by = 0.2)){
importances <- bRF_inference(counts, genes, tfs, alpha = alpha, scale = F,
prior_strength = 1,
pwm_occurrence = pwm_occurrence, nCores = 40)
for(density in c(0.001,0.005,0.01)){
grn_bRF <- bRF_network(importances, density =density, pwm_occurrence, genes, tfs)
networks[[paste0(alpha, '_', density)]] <- grn_bRF
}
}
connecTF_validation <- evaluate_networks(networks,
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
edges_num <- lapply(networks, function(df) df[sapply(df, is.numeric)])
d <- data.frame(name = names(unlist(lapply(edges_num, FUN = nrow))),
pwm = unlist(lapply(edges_num, FUN = colMeans)))
d%>%
separate(col = name, into = c("alpha", "density"), sep = '_') %>%
mutate(density = str_remove(density,"\\.pwm")) %>%
ggplot(aes(x=alpha, y=pwm, col = density)) +geom_smooth() + geom_point()
connecTF_validation %>%
separate(col = network_name, into = c("alpha", "density"), sep = '_') %>%
ggplot(aes(x=alpha, y=precision, col = density)) +geom_smooth() + geom_point()
connecTF_validation %>%
separate(col = network_name, into = c("alpha", "density"), sep = '_') %>%
ggplot(aes(x=alpha, y=recall, col = density)) +geom_smooth() + geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(patchwork)
library(DIANE)
# custom scripts for GRN inference
source('../inference_functions/bRF.R')
source('../inference_functions/LASSO-D3S.R')
source('../inference_functions/evaluateNetwork.R')
source('../inference_functions/MSE.R')
source('../grn_inference/rank_nodes.R')
load('../rdata/CO2_degs_expression.rdata')
genes <- CO2_responsive_genes$genes
tfs <- CO2_responsive_genes$tfs
counts <- CO2_responsive_genes$counts
load("../rdata/pwm_occurrences_CO2_response.rdata")
dim(pwm_occurrence)
networks <- list()
for(alpha in seq(0, 1, by = 0.2)){
importances <- bRF_inference(counts, genes, tfs, alpha = alpha, scale = F,
prior_strength = 1,
pwm_occurrence = pwm_occurrence, nCores = 40)
for(density in c(0.001,0.005,0.01)){
grn_bRF <- bRF_network(importances, density =density, pwm_occurrence, genes, tfs)
networks[[paste0(alpha, '_', density)]] <- grn_bRF
}
}
connecTF_validation <- evaluate_networks(networks,
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
edges_num <- lapply(networks, function(df) df[sapply(df, is.numeric)])
d <- data.frame(name = names(unlist(lapply(edges_num, FUN = nrow))),
pwm = unlist(lapply(edges_num, FUN = colMeans)))
d%>%
separate(col = name, into = c("alpha", "density"), sep = '_') %>%
mutate(density = str_remove(density,"\\.pwm")) %>%
ggplot(aes(x=alpha, y=pwm, col = density)) +geom_smooth() + geom_point()
connecTF_validation <- evaluate_networks(networks,
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
connecTF_validation %>%
separate(col = network_name, into = c("alpha", "density"), sep = '_') %>%
ggplot(aes(x=alpha, y=precision, col = density)) +geom_smooth() + geom_point()
connecTF_validation %>%
separate(col = network_name, into = c("alpha", "density"), sep = '_') %>%
ggplot(aes(x=alpha, y=recall, col = density)) +geom_smooth() + geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(patchwork)
library(DIANE)
# custom scripts for GRN inference
source('../inference_functions/bRF.R')
source('../inference_functions/LASSO-D3S.R')
source('../inference_functions/evaluateNetwork.R')
source('../inference_functions/MSE.R')
source('../grn_inference/rank_nodes.R')
