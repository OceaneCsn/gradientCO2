genes <- DEGs_CO2
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = ks[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~cluster, scales = 'free', ncol = ncol) +
theme_pubr() +
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = ks[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_boxplot(aes(x=as.factor(CO2))) + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~cluster, scales = 'free', ncol = ncol) +
theme_pubr() +
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = ks[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_boxplot(aes(x=as.factor(CO2), y=Expression)) + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~cluster, scales = 'free', ncol = ncol) +
theme_pubr() +
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = ks[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_boxplot() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~cluster, scales = 'free', ncol = ncol) +
theme_pubr() +
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = ks[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~cluster, scales = 'free', ncol = ncol) +
theme_pubr() +
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = ks[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point(alpha=0.1)+geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~cluster, scales = 'free', ncol = ncol) +
theme_pubr() +
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = ks[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point(alpha=0.01)+geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~cluster, scales = 'free', ncol = ncol) +
theme_pubr() +
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Set2")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
draw_genes <- function(genes, normalized_counts, ncol=NULL){
reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Set2")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
genes <- sample(DEGs_CO2, 5)
draw_genes(genes, normalized_counts)
draw_genes <- function(genes, normalized_counts, ncol=NULL){
reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_fill_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
draw_genes(genes, normalized_counts)
draw_genes <- function(genes, normalized_counts, ncol=NULL){
reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
draw_genes(genes, normalized_counts)
draw_clusters <- function(normalized_counts, genes, clustering){
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = clustering$membership[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point(alpha=0.01)+geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~cluster, scales = 'free', ncol = ncol) +
theme_pubr() +scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized clusters expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
clustering <- DIANE::run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin", model = "Normal", seed = 123)
clustering <- DIANE::
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin",
model = "Normal", seed = 123))
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 genes")
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 12, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 DEGs : clusters profiles")
draw_clusters <- function(normalized_counts, genes, clustering){
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = clustering$membership[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
group_by(cluster) %>%
mutate(N_genes = n()) %>%
unite(Cluster_label, cluster, N_genes, sep = ', N=') %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point(alpha=0.01)+geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~Cluster_label, scales = 'free', ncol = ncol) +
theme_pubr() +scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized clusters expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 DEGs : clusters profiles")
draw_clusters <- function(normalized_counts, genes, clustering){
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = clustering$membership[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
group_by(cluster, CO2, N, rep) %>%
mutate(N_genes = n()) %>%
unite(Cluster_label, cluster, N_genes, sep = ', N=') %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point(alpha=0.01)+geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~Cluster_label, scales = 'free', ncol = ncol) +
theme_pubr() +scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized clusters expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 DEGs : clusters profiles")
draw_clusters <- function(normalized_counts, genes, clustering){
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = clustering$membership[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
group_by(cluster, CO2, Nutrition, rep) %>%
mutate(N_genes = n()) %>%
unite(Cluster_label, cluster, N_genes, sep = ', N=') %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point(alpha=0.01)+geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~Cluster_label, scales = 'free', ncol = ncol) +
theme_pubr() +scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized clusters expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_N, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_N, K = 4, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("N DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_CO2_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2_N, K = 4, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("N*CO2 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_CO2_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2_N, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("N*CO2 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_CO2_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2_N, K = 9, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("N*CO2 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_CO2_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2_N, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("N*CO2 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_CO2_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2_N, K = 4, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("N*CO2 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_CO2_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2_N, K = 9, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("N*CO2 DEGs : clusters profiles")
knitr::opts_chunk$set(echo = TRUE)
library(DIANE)
library(tidyverse)
library(corrplot)
library(patchwork)
library(splines)
library(limma)
library(ggpubr)
load('../rdata/expression_data_no_mismatch.rdata')
corrplot(cor(data), method = 'color')
tcc <- normalize(data, norm_method = 'tmm', iteration = FALSE)
conditions <- str_split_fixed(colnames(data), '_', 2)[,1]
tcc <- filter_low_counts(tcc, 10*length(conditions))
normalized_counts <- TCC::getNormalizedData(tcc)
draw_distributions(data) /
draw_distributions(normalized_counts)
draw_PCA(normalized_counts)
DF <- 2
FDR <- 0.05
CO2 <- as.numeric(str_split_fixed(conditions, '\\.', 2)[,1])
CO2_spline <- ns(CO2, df = DF)
N <- str_split_fixed(conditions, '\\.', 2)[,2]
design <- model.matrix(~CO2_spline*N)
fit <- lmFit(normalized_counts, design) %>%
eBayes()
CO2_coeffs <- 2:(1+DF)
N_coeff <- DF+2
CO2_N_coeffs <- (DF+3):ncol(design)
DEGs_CO2 <- rownames(topTable(fit, coef=CO2_coeffs,
adjust.method = "fdr",
p.value=FDR, number=20000))
DEGs_N <- rownames(topTable(fit, coef=N_coeff,
adjust.method = "fdr",
p.value=FDR, number=20000))
DEGs_CO2_N <- rownames(topTable(fit, coef=CO2_N_coeffs,
adjust.method = "fdr",
p.value=FDR, number=20000))
genes <- sample(DEGs_CO2, 5)
draw_genes <- function(genes, normalized_counts, ncol=NULL){
reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
draw_genes(genes, normalized_counts)
draw_clusters <- function(normalized_counts, genes, clustering){
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = clustering$membership[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
group_by(cluster, CO2, Nutrition, rep) %>%
mutate(N_genes = n()) %>%
unite(Cluster_label, cluster, N_genes, sep = ', N=') %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point(alpha=0.01)+geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~Cluster_label, scales = 'free', ncol = ncol) +
theme_pubr() +scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized clusters expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_N, K = 4, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("N DEGs : clusters profiles")
draw_clusters(normalized_counts, DEGs_CO2_N,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2_N, K = 9, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("N*CO2 DEGs : clusters profiles")
bg <- convert_from_agi(rownames(normalized_counts))
for(degs in list(DEGs_CO2, DEGs_N, DEGs_CO2_N)){
entrez <- convert_from_agi(degs)
go <- enrich_go(entrez, bg)
print(draw_enrich_go(go))
}
knitr::opts_chunk$set(echo = TRUE)
library(DIANE)
library(tidyverse)
library(corrplot)
library(patchwork)
library(splines)
library(limma)
library(ggpubr)
load('../rdata/expression_data_no_mismatch.rdata')
corrplot(cor(data), method = 'color')
tcc <- normalize(data, norm_method = 'tmm', iteration = FALSE)
conditions <- str_split_fixed(colnames(data), '_', 2)[,1]
tcc <- filter_low_counts(tcc, 10*length(conditions))
normalized_counts <- TCC::getNormalizedData(tcc)
draw_distributions(data) /
draw_distributions(normalized_counts)
draw_PCA(normalized_counts)
DF <- 2
FDR <- 0.05
CO2 <- as.numeric(str_split_fixed(conditions, '\\.', 2)[,1])
CO2_spline <- ns(CO2, df = DF)
N <- str_split_fixed(conditions, '\\.', 2)[,2]
design <- model.matrix(~CO2_spline*N)
fit <- lmFit(normalized_counts, design) %>%
eBayes()
CO2_coeffs <- 2:(1+DF)
N_coeff <- DF+2
CO2_N_coeffs <- (DF+3):ncol(design)
DEGs_CO2 <- rownames(topTable(fit, coef=CO2_coeffs,
adjust.method = "fdr",
p.value=FDR, number=20000))
DEGs_N <- rownames(topTable(fit, coef=N_coeff,
adjust.method = "fdr",
p.value=FDR, number=20000))
DEGs_CO2_N <- rownames(topTable(fit, coef=CO2_N_coeffs,
adjust.method = "fdr",
p.value=FDR, number=20000))
genes <- sample(DEGs_CO2, 5)
draw_genes <- function(genes, normalized_counts, ncol=NULL){
reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2)) %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
draw_genes(genes, normalized_counts)
draw_clusters <- function(normalized_counts, genes, clustering){
reshape2::melt(normalized_counts[genes,],
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2),
cluster = clustering$membership[gene]) %>%
group_by(gene) %>%
mutate(Expression= (Expression-mean(Expression))/sd(Expression)) %>%
group_by(cluster, CO2, Nutrition, rep) %>%
mutate(N_genes = n()) %>%
unite(Cluster_label, cluster, N_genes, sep = ', N=') %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point(alpha=0.01)+geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~Cluster_label, scales = 'free', ncol = ncol) +
theme_pubr() +scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized clusters expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
}
draw_clusters(normalized_counts, DEGs_CO2,
run_coseq(conds = conditions, data = normalized_counts,
genes = DEGs_CO2, K = 6, transfo = "arcsin",
model = "Normal", seed = 123)) + ggtitle("C02 DEGs : clusters profiles")
knitr::kable(go)
bg <- convert_from_agi(rownames(normalized_counts))
bg <- convert_from_agi(rownames(normalized_counts))
entrez <- convert_from_agi(DEGs_CO2)
go <- enrich_go(entrez, bg)
go <- enrich_go(entrez, bg)
knitr::kable(go)
