normalized_counts_kno3 <- normalized_counts[,str_detect(colnames(normalized_counts), "KNO3")]
############## or CO2 design on KNO3 only
# dge <- edgeR::DGEList(
#   counts = normalized_counts_kno3,
#   norm.factors = rep(1,ncol(normalized_counts_kno3)))
# conditions <- str_split_fixed(colnames(normalized_counts_kno3), '_', 2)[,1]
# CO2 <- as.numeric(str_split_fixed(conditions, '\\.', 2)[,1])
# CO2_spline <- ns(CO2, df = DF)
# design <- model.matrix(~CO2_spline)
############## tests
y <- edgeR::estimateDisp(dge, design)
fit <- edgeR::glmQLFit(y, design)
CO2_coeffs <- 2:(1+DF)
CO2_dea <- edgeR::glmQLFTest(fit, coef = CO2_coeffs)$table %>%
filter(PValue < 0.005)
knitr::opts_chunk$set(echo = TRUE)
library(DIANE)
library(tidyverse)
library(corrplot)
library(patchwork)
library(splines)
library(edgeR)
library(ggpubr)
load('../rdata/expression_data_no_mismatch.rdata')
N_coeff <- DF+2
FDR = 0.005
N_dea <- edgeR::glmQLFTest(fit, coef = N_coeff)$table %>%
filter(PValue < FDR)
CO2_N_dea <- edgeR::glmQLFTest(fit, coef = CO2_N_coeffs)$table %>%
filter(PValue < FDR)
CO2_N_coeffs <- (DF+3):ncol(design)
CO2_N_dea <- edgeR::glmQLFTest(fit, coef = CO2_N_coeffs)$table %>%
filter(PValue < FDR)
precision_perm <- test_precision(grn_bRF, input_genes = genes, input_tfs = tfs, N = 50); precision_perm
evaluate_networks(list("bRF_0.5" = grn_bRF), input_genes = genes, input_tfs = tfs)
mean(grn_bRF$pwm)
# PHHT1.2
get_gene_information(describe_node(network, "AT5G43350")$regulators, organism = "Arabidopsis thaliana")
# PHHT1.2
get_gene_information(describe_node(network, "AT5G43370")$regulators, organism = "Arabidopsis thaliana")
# targets of LHY
get_gene_information(describe_node(network, "AT4G24020")$regulators, organism = "Arabidopsis thaliana")
# targets of LHY
get_gene_information(describe_node(network, "AT4G24020")$targets, organism = "Arabidopsis thaliana")
# regulators of GRXS13
get_gene_information(describe_node(network, "AT1G03850")$regulators, organism = "Arabidopsis thaliana")
grn_bRF[ grn_bRF$to%in% targets,] %>%
mutate(from_label = nodes[match(from, nodes$id), "label"],
from_to = nodes[match(to, nodes$id), "label"],
`PWM` = ifelse(pwm == 1, "In promoter",
ifelse(pwm==0.5, "Not available",
"Not in promoter"))) %>%
ggplot(aes(x=from_to, y=from_label, fill=PWM))+
geom_tile(col="grey") + theme_pubr() +
scale_fill_brewer(palette = "Accent") +
xlab("Target gene") + ylab("Regulator gene")
adj <- grn_bRF[ grn_bRF$to%in% targets,] %>%
mutate(from_label = nodes[match(from, nodes$id), "label"],
from_to = nodes[match(to, nodes$id), "label"],
`PWM` = ifelse(pwm == 1, "In promoter",
ifelse(pwm==0.5, "Not available",
"Not in promoter"))) %>%
ggplot(aes(x=from_to, y=from_label, fill=PWM))+
geom_tile(col="grey") + theme_pubr() +
scale_fill_brewer(palette = "Accent") +
xlab("Target gene") + ylab("Regulator gene")
ggexport(adj, filename = "../results/Ngenes_adjacency_allregs.pdf", width = 6, height = 6)
ggexport(adj, filename = "../results/Ngenes_adjacency_allregs.pdf", width = 6, height = 12)
# PHHT1.2
get_gene_information(describe_node(network, "AT2G31955")$regulators, organism = "Arabidopsis thaliana")
# networks <- get_alpha_exploration()
# save(networks, file = "parameter_exploration.rdata")
#
load("parameter_exploration.rdata")
edges_num <- lapply(networks, function(df) df[sapply(df, is.numeric)])
d <- data.frame(name = names(unlist(lapply(edges_num, FUN = nrow))),
pwm = unlist(lapply(edges_num, FUN = colMeans)))
connecTF_validation <- evaluate_networks(networks,
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
target_validation <- evaluate_networks(networks, validation = c("TARGET"),
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
fig <- d%>%
separate(col = name, into = c("rep", "alpha", "density"), sep = '_') %>%
filter(density==0.005) %>%
mutate(density = str_remove(density,"\\.pwm")) %>%
mutate(alpha = as.numeric(alpha)) %>%
ggplot(aes(x=alpha, y=pwm, col = density, fill = density)) +geom_smooth() +
geom_point() + theme_pubr(legend = 'none') + ylab("PWM support") +
scale_color_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2") + xlab(expression(alpha))+
connecTF_validation%>%
separate(col = network_name, into = c("rep", "alpha", "density"), sep = '_') %>%
filter(density==0.005) %>%
mutate(alpha = as.numeric(alpha)) %>%
ggplot(aes(x=alpha, y=precision, col = density, fill = density)) +
geom_point() + theme_pubr() + geom_smooth() +
scale_color_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+ xlab(expression(alpha))+
connecTF_validation%>%
separate(col = network_name, into = c("rep", "alpha", "density"), sep = '_') %>%
filter(density==0.005) %>%
mutate(alpha = as.numeric(alpha)) %>%
mutate(density = str_remove(density,"\\.pwm")) %>%
ggplot(aes(x=alpha, y=recall, col = density, fill = density)) +
geom_point() + theme_pubr(legend = 'none') + geom_smooth() +
scale_color_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+ xlab(expression(alpha)) +
plot_annotation(tag_levels = 'a', title = "PWM support, precision and recall for bRF as a function of TFBS contribution")
ggexport(fig, filename = "../results/alpha_exploration_grn.pdf", width = 11, height = 5)
str_detect(names(networks), "0.005")
# networks <- get_alpha_exploration()
# save(networks, file = "parameter_exploration.rdata")
#
networks <- networks[str_detect(names(networks), "0.005")]
save(networks, file = "parameter_exploration.rdata")
load("parameter_exploration.rdata")
edges_num <- lapply(networks, function(df) df[sapply(df, is.numeric)])
d <- data.frame(name = names(unlist(lapply(edges_num, FUN = nrow))),
pwm = unlist(lapply(edges_num, FUN = colMeans)))
connecTF_validation <- evaluate_networks(networks,
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
target_validation <- evaluate_networks(networks, validation = c("TARGET"),
input_genes = genes, input_tfs = tfs, nCores = 40); connecTF_validation
fig <- d%>%
separate(col = name, into = c("rep", "alpha", "density"), sep = '_') %>%
filter(density==0.005) %>%
mutate(density = str_remove(density,"\\.pwm")) %>%
mutate(alpha = as.numeric(alpha)) %>%
ggplot(aes(x=alpha, y=pwm, col = density, fill = density)) +geom_smooth() +
geom_point() + theme_pubr(legend = 'none') + ylab("PWM support") +
scale_color_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2") + xlab(expression(alpha))+
connecTF_validation%>%
separate(col = network_name, into = c("rep", "alpha", "density"), sep = '_') %>%
filter(density==0.005) %>%
mutate(alpha = as.numeric(alpha)) %>%
ggplot(aes(x=alpha, y=precision, col = density, fill = density)) +
geom_point() + theme_pubr() + geom_smooth() +
scale_color_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+ xlab(expression(alpha))+
connecTF_validation%>%
separate(col = network_name, into = c("rep", "alpha", "density"), sep = '_') %>%
filter(density==0.005) %>%
mutate(alpha = as.numeric(alpha)) %>%
mutate(density = str_remove(density,"\\.pwm")) %>%
ggplot(aes(x=alpha, y=recall, col = density, fill = density)) +
geom_point() + theme_pubr(legend = 'none') + geom_smooth() +
scale_color_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+ xlab(expression(alpha)) +
plot_annotation(tag_levels = 'a', title = "PWM support, precision and recall for bRF as a function of TFBS contribution")
ggexport(fig, filename = "../results/alpha_exploration_grn.pdf", width = 11, height = 5)
draw_genes(regs, counts_all_N, annotation = T, labels = T)
annot <- gene_annotations$`Arabidopsis thaliana`
draw_genes <- function(genes, normalized_counts, ncol=NULL,
together = FALSE, labels = FALSE, annotation = F){
genes <- intersect(genes, rownames(normalized_counts))
data <- reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2))
if(labels) {
if(annotation)
data$label <- annot[match(data$gene, rownames(annot)), "label"]
else
data$label <- ngenes[match(data$gene, ngenes$AGI), "Gene"]
plot <- data %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
if(!together)
plot <- plot + facet_wrap(~label, scales = 'free', ncol = ncol)
}
else{
data$label <- ngenes[match(data$gene, ngenes$AGI), "Gene"]
plot <- data %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
if(!together)
plot <- plot + facet_wrap(~label, scales = 'free', ncol = ncol)
}
plot
}
draw_genes(regs, counts_all_N, annotation = T, labels = T)
annot <- gene_annotations$`Arabidopsis thaliana`
draw_genes <- function(genes, normalized_counts, ncol=NULL,
together = FALSE, labels = FALSE, annotation = F){
genes <- intersect(genes, rownames(normalized_counts))
data <- reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2))
if(labels) {
if(annotation)
data$label <- annot[match(data$gene, rownames(annot)), "label"]
else
data$label <- ngenes[match(data$gene, ngenes$AGI), "Gene"]
plot <- data %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF)) +
theme(strip.background = element_blank())
if(!together)
plot <- plot + facet_wrap(~label, scales = 'free', ncol = ncol)
}
else{
data$label <- ngenes[match(data$gene, ngenes$AGI), "Gene"]
plot <- data %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
if(!together)
plot <- plot + facet_wrap(~label, scales = 'free', ncol = ncol)
}
plot
}
draw_genes(regs, counts_all_N, annotation = T, labels = T)
ggexport(draw_genes(regs, counts_all_N, annotation = T, labels = T), filename = "../results/expression_N_regulators.pdf")
ggexport(draw_genes(regs, counts_all_N, annotation = T, labels = T), filename = "../results/expression_N_regulators.pdf", width = 10)
ggexport(draw_genes(targets, counts_all_N, annotation = T, labels = T), filename = "../results/expression_N_target.pdf", width = 10)
ggexport(draw_genes(regs, counts, annotation = T, labels = T), filename = "../results/expression_N_regulators.pdf", width = 10)
ggexport(draw_genes(targets, counts, annotation = T, labels = T), filename = "../results/expression_N_target.pdf", width = 10)
targets <- na.omit(nodes[str_detect(nodes$label, paste0(c("GRXS13", "NRT", "G6PD", "NIR"),
collapse = '|')),"id"])
ggexport(draw_genes(targets, counts, annotation = T, labels = T), filename = "../results/expression_N_target.pdf", width = 10)
targets <- na.omit(nodes[str_detect(nodes$label, paste0(c("GRXS13", "NRT", "G6PD", "NIR", "CNX"),
collapse = '|')),"id"])
adj <- grn_bRF[grn_bRF$from %in% regs & grn_bRF$to%in% targets,] %>%
mutate(from_label = nodes[match(from, nodes$id), "label"],
from_to = nodes[match(to, nodes$id), "label"],
`PWM` = ifelse(pwm == 1, "In promoter",
ifelse(pwm==0.5, "Not available",
"Not in promoter"))) %>%
ggplot(aes(x=from_to, y=from_label, fill=PWM))+
geom_tile(col="grey") + theme_pubr() +
scale_fill_brewer(palette = "Accent") +
xlab("Target gene") + ylab("Regulator gene")
fig_N <- draw_genes(regs, counts, annotation = T, labels = T) + draw_genes(targets, counts, annotation = T, labels = T) + adj; fig_N
fig_N <- draw_genes(regs, counts, annotation = T, labels = T) / (draw_genes(targets, counts, annotation = T, labels = T) + adj) ; fig_N
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 10)
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 15, height = 12)
fig_N <- draw_genes(regs, counts, annotation = T, labels = T) + ggtitle("Expression of regulators") / (draw_genes(targets, counts, annotation = T, labels = T) + ggtitle("Expression of target genes") + adj) ; fig_N
draw_genes(regs, counts, annotation = T, labels = T) + ggtitle("Expression of regulators")
fig_N <- (draw_genes(regs, counts, annotation = T, labels = T) + ggtitle("Expression of regulators")) / ((draw_genes(targets, counts, annotation = T, labels = T) + ggtitle("Expression of target genes")) + adj) ; fig_N
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 15, height = 12)
fig_N <- (draw_genes(regs, counts, annotation = T, labels = T, ncol = 5) + ggtitle("Expression of regulators")) / ((draw_genes(targets, counts, annotation = T, labels = T) + ggtitle("Expression of target genes")) + adj) ; fig_N
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 15, height = 12)
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 15, height = 14)
fig_N <- (draw_genes(regs, counts, annotation = T, labels = T, ncol = 5) + ggtitle("Expression of regulators")) /
((draw_genes(targets, counts, annotation = T, labels = T) + ggtitle("Expression of target genes")) + adj) + plot_annotation(tag_levels = 'a'); fig_N
fig_N <- (draw_genes(regs, counts, annotation = T, labels = T, ncol = 5) + ggtitle("Expression of regulators")) /
((draw_genes(targets, counts, annotation = T, labels = T) + ggtitle("Expression of target genes")) + adj) + plot_annotation(tag_levels = 'a'); fig_N
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 15, height = 14)
fig_N <- (draw_genes(regs, counts, annotation = T, labels = T, ncol = 5) + ggtitle("Expression of regulator genes")) /
((draw_genes(targets, counts, annotation = T, labels = T) + ggtitle("Expression of target genes")) + adj) + plot_annotation(tag_levels = 'a'); fig_N
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 15, height = 14)
targets <- na.omit(nodes[str_detect(nodes$label, paste0(c("GRXS13", "NRT", "G6PD", "NIR"),
collapse = '|')),"id"])
fig_N <- (draw_genes(regs, counts, annotation = T, labels = T, ncol = 5) + ggtitle("Expression of regulator genes")) /
((draw_genes(targets, counts, annotation = T, labels = T) + ggtitle("Expression of target genes")) + adj) + plot_annotation(tag_levels = 'a'); fig_N
regs <- na.omit(nodes[str_detect(nodes$label, paste0(c("HHO2", "HHO3", "HRS1", "CDF3", "BZIP3",
"CCA1", "NLP7", "NLP6", "BT1", "BT2", "RAV1"),
collapse = '|')),"id"])
fig_N <- (draw_genes(regs, counts, annotation = T, labels = T, ncol = 5) + ggtitle("Expression of regulator genes")) /
((draw_genes(targets, counts, annotation = T, labels = T) + ggtitle("Expression of target genes")) + adj) + plot_annotation(tag_levels = 'a'); fig_N
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 15, height = 14)
fig_N <- (draw_genes(regs, counts, annotation = T, labels = T, ncol = 4) + ggtitle("Expression of regulator genes")) /
((draw_genes(targets, counts, annotation = T, labels = T, ncol = 2) + ggtitle("Expression of target genes")) + adj) + plot_annotation(tag_levels = 'a'); fig_N
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 15, height = 14)
ggexport(fig_N, filename = "../results/expression_adj_N_genes.pdf", width = 12, height = 14)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(patchwork)
library(DIANE)
library(ggpubr)
library(gridExtra)
# custom scripts for GRN inference
source('../inference_functions/bRF.R')
source('../inference_functions/LASSO-D3S.R')
source('../inference_functions/evaluateNetwork.R')
source('../inference_functions/MSE.R')
source('../grn_inference/rank_nodes.R')
load('../rdata/CO2_degs_expression.rdata')
genes <- CO2_responsive_genes$genes
tfs <- CO2_responsive_genes$tfs
counts <- CO2_responsive_genes$counts
annot <- gene_annotations$`Arabidopsis thaliana`
draw_genes <- function(genes, normalized_counts, ncol=NULL,
together = FALSE, labels = FALSE, annotation = F){
genes <- intersect(genes, rownames(normalized_counts))
data <- reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2))
if(labels) {
if(annotation)
data$label <- annot[match(data$gene, rownames(annot)), "label"]
else
data$label <- ngenes[match(data$gene, ngenes$AGI), "Gene"]
plot <- data %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF)) +
theme(strip.background = element_blank())
if(!together)
plot <- plot + facet_wrap(~label, scales = 'free', ncol = ncol)
}
else{
data$label <- ngenes[match(data$gene, ngenes$AGI), "Gene"]
plot <- data %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
if(!together)
plot <- plot + facet_wrap(~label, scales = 'free', ncol = ncol)
}
plot
}
Fe <- c("AT5G21070", "AT5G21060", "AT5G21080")
N <- c("AT3G60530", "AT3G60520")
kinases <- c("AT1G66880", "AT1G66910", "AT1G66900", "AT1G66890")
Zn <- c('AT4G17340', 'AT4G17340')
draw_genes(Fe, counts, annotation = T, labels = T)
targets <- na.omit(nodes[str_detect(nodes$label, paste0(c("GRXS13", "NRT", "G6PD", "NIR"),
collapse = '|')),"id"])
draw_genes(Zn, counts, annotation = T, labels = T)
normalized_counts <- counts
genes <- N
genes <- intersect(genes, rownames(normalized_counts))
data <- reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2))
reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression")
# expression dataset
load('rdata/expression_data_no_mismatch.rdata')
# list of regulators, same as in the integration manuscript,
# touttaken from ATFDB et plnTFDB
load('rdata/regulators.rdata')
#normalization
conditions <- str_split_fixed(colnames(data), '_', 2)[,1]
tcc <- normalize(data, norm_method = 'tmm', iteration = FALSE,
conditions = conditions)
tcc <- filter_low_counts(tcc, 10*length(conditions))
normalized_counts <- TCC::getNormalizedData(tcc)
draw_PCA(normalized_counts)
genes <- N
genes <- intersect(genes, rownames(normalized_counts))
data <- reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2))
draw_genes <- function(genes, normalized_counts, ncol=NULL,
together = FALSE, labels = FALSE, annotation = F){
genes <- intersect(genes, rownames(normalized_counts))
data <- reshape2::melt(normalized_counts[genes,] ,
quiet =T, value.name = "Expression") %>%
rename(gene = Var1, condition = Var2) %>%
separate(condition, into = c("CO2", "Nutrition", "rep")) %>%
mutate(CO2 = as.numeric(CO2))
if(labels) {
if(annotation)
data$label <- annot[match(data$gene, rownames(annot)), "label"]
else
data$label <- ngenes[match(data$gene, ngenes$AGI), "Gene"]
plot <- data %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF)) +
theme(strip.background = element_blank())
if(!together)
plot <- plot + facet_wrap(~label, scales = 'free', ncol = ncol)
}
else{
data$label <- ngenes[match(data$gene, ngenes$AGI), "Gene"]
plot <- data %>%
ggplot(aes(x=CO2, y=Expression, color=Nutrition, fill = Nutrition)) +
geom_point() + geom_smooth(method = "lm", se = TRUE,
size = 1, alpha=0.1,
formula = y ~ splines::ns(x, df = DF)) +
facet_wrap(~gene, scales = 'free', ncol = ncol) +
theme_pubr() + scale_fill_brewer(palette="Accent")+
scale_color_brewer(palette="Accent")+
labs(title = "Normalized gene expression in CO2 gradient experiment",
subtitle = paste("Splines interpolation with DF=", DF))
if(!together)
plot <- plot + facet_wrap(~label, scales = 'free', ncol = ncol)
}
plot
}
Fe <- c("AT5G21070", "AT5G21060", "AT5G21080")
kinases <- c("AT1G66880", "AT1G66910", "AT1G66900", "AT1G66890")
Zn <- c('AT4G17340', 'AT4G17340')
draw_genes(Zn, counts, annotation = T, labels = T)
draw_genes(Fe, counts, annotation = T, labels = T)
draw_genes(N, counts, annotation = T, labels = T)
draw_genes(N, normalized_counts, annotation = T, labels = T)
DF=2
draw_genes(N, normalized_counts, annotation = T, labels = T)
draw_genes(Fe, normalized_counts, annotation = T, labels = T)
draw_genes(kinases, normalized_counts, annotation = T, labels = T)
draw_genes(Zn, normalized_counts, annotation = T, labels = T)
Zn <- c('AT4G17340', 'AT4G17340')
draw_genes(Zn, normalized_counts, annotation = T, labels = T)
Zn <- c('AT4G17340', 'AT4G17340',"AT1G66880")
draw_genes(Zn, normalized_counts, annotation = T, labels = T)
load('../rdata/CO2_degs_expression.rdata')
genes <- CO2_responsive_genes$genes
tfs <- CO2_responsive_genes$tfs
counts <- CO2_responsive_genes$counts
Zn <- c('AT4G17330', 'AT4G17340')
draw_genes(Zn, normalized_counts, annotation = T, labels = T)
intersect(genes, Zn )
intersect(genes, "AT3G60530" )
draw_genes(c("AT5G21070","AT3G60530", 'AT4G17340'), normalized_counts, annotation = T, labels = T)
kinases <- c("AT1G66880", "AT1G66910", "AT1G66900", "AT1G66890")
draw_genes(kinases, normalized_counts, annotation = T, labels = T)
ranking <- nodes[order(nodes$degree_out, decreasing = T),
c("label", "gene_type", "degree", "degree_in",
"degree_out")]
load('../rdata/CO2_degs_expression.rdata')
genes <- CO2_responsive_genes$genes
tfs <- CO2_responsive_genes$tfs
counts <- CO2_responsive_genes$counts
load("../rdata/pwm_occurrences_CO2_response.rdata")
dim(pwm_occurrence)
set.seed(131214)
importances <- bRF_inference(counts, genes, tfs, alpha = 0.8, prior_strength = 1,
pwm_occurrence = pwm_occurrence, nCores = 50)
grn_bRF <- bRF_network(importances, density = 0.005, pwm_occurrence, genes, tfs)
# PWM support
mean(grn_bRF$pwm)
# precision and recall
evaluate_networks(list("bRF_0.5" = grn_bRF), input_genes = genes, input_tfs = tfs)
nodes <- rank_nodes(graph_from_data_frame(grn_bRF, directed = T),
regulators_per_organism[["Arabidopsis thaliana"]],
gene_annotations$`Arabidopsis thaliana`)
head(nodes[order(nodes$degree_out, decreasing = T),], n=30)
head(nodes[order(nodes$degree_in, decreasing = T),], n=30)
head(nodes[order(nodes$degree, decreasing = T),], n=30)
# PWM support
mean(grn_bRF$pwm)
ranking <- nodes[order(nodes$degree_out, decreasing = T),
c("label", "gene_type", "degree", "degree_in",
"degree_out")]
N_response <- ifelse(ranking$label %in% c("HHO2", "HHO3", "HRS1", "CDF3", "BZIP3","UIF1","HB6",
"CCA1", "NLP7", "NLP6", "BT1", "BT2", "RAV1", "DIV1"), "#6BAED6", "grey95")[1:40]
my_table_theme <- ttheme_minimal(core=list(bg_params = list(fill = N_response, col=NA, alpha = 0.6)))
pdf("../results/nodes_ranking.pdf", width = 6, height = 12)
grid.table(head(ranking, n=40), theme = my_table_theme)
dev.off()
View(nodes)
# PHHT1.2
get_gene_information(describe_node(network, "AT3G60530")$target, organism = "Arabidopsis thaliana")
network <- igraph::from_data_frame(grn_bRF, oriented=T)
# NRT2.2
get_gene_information(describe_node(network, "AT1G08100")$regulators, organism = "Arabidopsis thaliana")
network <- igraph::graph_from_data_frame(grn_bRF, oriented=T)
network <- igraph::graph_from_data_frame(grn_bRF, directed = T)
# NRT2.2
get_gene_information(describe_node(network, "AT1G08100")$regulators, organism = "Arabidopsis thaliana")
intersect(genes, "AT1G68880")
# PHHT1.2
get_gene_information(describe_node(network, "AT1G27730")$target, organism = "Arabidopsis thaliana")
draw_genes("AT3G45650", normalized_counts, annotation = T, labels = T)
draw_genes(c("AT3G45650", "AT5G21070"), normalized_counts, annotation = T, labels = T)
intersect(genes, "AT3G45650")
